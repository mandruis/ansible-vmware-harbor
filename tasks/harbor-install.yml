---
# create install dirs
# - debug: var=harbor_install_tmp
# - debug: var=harbor_install_dir

- name: create install dir1
  file: 
    path: '{{ harbor_install_tmp }}'
    state: directory

- name: create install dir2
  file:
    path: '{{ harbor_install_dir }}'
    state: directory

- name: Check if uploaded already
  stat:
    path: '{{ harbor_install_tmp }}/{{ harbor_install_tgz }}'
  register: harbor_install_package

- name: Check if uploaded already
  stat:
    path: '{{ harbor_install_dir }}/harbor'
  register: harbor_install_folder

# Download Harbor
- name: "Downloading Harbor {{ harbor_version }} (offline installer)"
  get_url: 
    url: '{{ harbor_url }}'
    dest: '{{ harbor_install_tmp }}/{{ harbor_install_tgz }}'
    validate_certs: "no"
  when: not harbor_install_package.stat.exists 
# unpack 
- name: unpack harbor_install_tgz
  unarchive: 
    remote_src: True
    src: '{{ harbor_install_tmp }}/{{ harbor_install_tgz }}'
    dest: '{{ harbor_install_dir }}'
  when: not harbor_install_folder.stat.exists

# config template
- name: upload harbor.yml from template
  template: 
    src: harbor.yml.j2
    dest: '{{ harbor_install_dir }}/harbor/harbor.yml'
  register: update_harbor_cfg
  notify: rerun prepare

- name: Check install log exists
  command: cat "{{ harbor_install_dir }}/harbor_install_log.txt"
  args:
    removes: "{{ harbor_install_dir }}/harbor_install_log.txt"
  register: install_log_content

# run installer
- name: run harbor install script
  shell: './install.sh {{ harbor_installer_with }} {{ harbor_installer_extra_args }} > {{ harbor_install_dir }}/harbor_install_log.txt' 
  args:
    chdir: '{{ harbor_install_dir }}/harbor'
  when: "'Harbor has been installed and started successfully' not in install_log_content.stdout"
  
- name: Create harbor.service to make it run at boot-time
  copy:
    dest: /etc/systemd/system/harbor.service
    mode: 0644
    content: |
        [Unit]
        Description=Servico de manutencao do Harbor
        After=network.target docker.service

        [Service]
        #Type=simple
        Type=oneshot
        RemainAfterExit=yes

        WorkingDirectory={{ harbor_install_dir }}/harbor
        ExecStart=/usr/local/bin/docker-compose -f {{ harbor_install_dir }}/harbor/docker-compose.yml up -d
        ExecStop=/usr/local/bin/docker-compose -f {{ harbor_install_dir }}/harbor/docker-compose.yml down
        #Restart=always
        [Install]
        WantedBy=multi-user.target
  register: harbor_service_updated
  notify: reload systemd

- name: flush handlers
  meta: flush_handlers

- name: Make sure harbor service started and enabled
  service:
    name: harbor
    state: started
    enabled: true  

- name: Test harbor port is up
  wait_for:
      host: 127.0.0.1 
      port: "{{ item }}"
      timeout: 20
      state: started # not required. choices: absent;drained;present;started;stopped. Either C(present), C(started), or C(stopped), C(absent), or C(drained).,When checking a port C(started) will ensure the port is open, C(stopped) will check that it is closed, C(drained) will check for active connections.,When checking for a file or a search string C(present) or C(started) will ensure that the file or string is present before continuing, C(absent) will check that file is absent or removed.
  with_items:
    - 443
    - 80

- name: "Creating registries..."
  uri:
    url: "https://{{ harbor_hostname }}/api/registries"
    method: POST
    user: "admin"
    password: "{{ harbor_admin_password | default('Harbor12345') }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: yes
    return_content: yes
    body: "{{ lookup('template', 'templates/create_registry.j2') }}"
  when: harbor_registries is defined and harbor_hostname is defined
  with_items: "{{ harbor_registries }}"

- name: "Creating replications..."
  uri:
    url: "https://{{ harbor_hostname }}/api/replication/policies"
    method: POST
    user: "admin"
    password: "{{ harbor_admin_password | default('Harbor12345') }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: yes
    return_content: yes
    body: "{{ lookup('template', 'templates/replication_pull.j2') }}"
  when: harbor_replication_pull is defined and harbor_hostname is defined
  with_items: "{{ harbor_replication_pull }}"

- name: "Creating projects..."
  uri:
    url: "https://{{ harbor_hostname }}/api/projects"
    method: POST
    user: "admin"
    password: "{{ harbor_admin_password | default('Harbor12345') }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: yes
    return_content: yes
    body: "{{ lookup('template', 'templates/create_project.j2') }}"
  when: harbor_projects is defined and harbor_hostname is defined
  with_items: "{{ harbor_projects }}"

- name: "Creating users..."
  uri:
    url: "https://{{ harbor_hostname }}/api/users"
    method: POST
    user: "admin"
    password: "{{ harbor_admin_password | default('Harbor12345') }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: yes
    return_content: yes
    body: "{{ lookup('template', 'templates/create_user.j2') }}"
  when: harbor_users is defined and harbor_hostname is defined
  with_items: "{{ harbor_users }}"